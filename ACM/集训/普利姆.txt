//最小生成树 普里姆算法    采用邻接矩阵存储
void MiniSpanTree(MGraph *G)
{
	int min, i, j, k;
	int adjvex[MaxVex];		//保存相关顶点下标
	int lowcost[MaxVex];	//保存相关顶点间边的权值
	lowcost[0] = 0;			//初始化第一个权值为0，即V0加入生成树
	adjvex[0] = 0;			//初始化第一个顶点下标为0

	for (i=1; i<G->numVertexes; ++i)
	{
		lowcost[i] = G->arc[0][i];
		adjvex[i] = 0;				//将v0顶点与之有边的权值存入数组  并初始化都为v0的下标
	}

	for (i=1; i<G->numVertexes; ++i)
	{
		min = INFINITY;

		j = 1;
		k = 0;

		while (j<G->numVertexes)
		{
			//如果两个顶点之间存在边并且权值小于min
			if (lowcost[j]!=0 && lowcost[j]<min)
			{
				min = lowcost[j];
				k = j;
			}

			++j;
		}
		printf("(%d, %d)", adjvex[k], k);	//输出当前顶点边中权值最小的边
		lowcost[k] = 0;						//将当前顶点的权值设为0，表示此顶点已经完成任务
		for (j=1; j<G->numVertexes; ++j)
		{
			if (lowcost[j]!=0 && G->arc[k][j]<lowcost[j])
			{
				lowcost[j] = G->arc[k][j];
				adjvex[j] = k;
			}
		}
	}
}