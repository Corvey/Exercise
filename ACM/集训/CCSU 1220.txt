#include <stdio.h>
#include <string.h>
#include <math.h>
#define INFINITY 250000000
double side[8][8], MIN;
int done[8], MINP[8], n;
void DFS(int *P, double sum, int n, int cur)
{
    if(n == cur)
    {
        if(sum < MIN)
        {
            MIN = sum;
            memcpy(MINP, P, sizeof(MINP));
        }
    }
    else
    {
        for(int i=0; i<n; ++i)
        {
            int ok = 1;
            for(int j=0; j<cur; ++j)
            {
                if(P[j] == i)
                    ok = 0;
            }
            if(ok)
            {
                P[cur] = i;
                if(cur)
                    DFS(P, sum + side[ P[cur-1] ][i], n, cur+1);
                else
                    DFS(P, sum, n, cur+1);
            }
        }
    }
}

int main(void)
{
    int x, y, a[8][2], P[8], nCase = 0;
    while(1)
    {
        scanf("%d", &n);
        if(!n)
            break;
        for(int i=0; i<n; ++i)
            scanf("%d %d", &a[i][0], &a[i][1]);
        for(int i=0; i<n; ++i)
        {
            side[i][i] = INFINITY;
            for(int j=i+1; j<n; ++j)
            {
                x = a[i][0] - a[j][0];
                y = a[i][1] - a[j][1];
                side[i][j] = hypot(x, y);
                side[j][i] = side[i][j];
            }
        }
        MIN = INFINITY;
        DFS(P, 0, n, 0);
        printf("Case #%d\n", ++nCase);
        for(int i=1; i<n; ++i)
        {
            printf("Cable requirement to connect (%d,%d) to (%d,%d) is %.2lf feet.\n", a[ MINP[i-1] ][0], a[ MINP[i-1] ][1], a[ MINP[i] ][0], a[ MINP[i] ][1], side[ MINP[i-1] ][ MINP[i] ]);
        }
        printf("Number of feet of cable required is %.2lf.\n", MIN);
    }
}
