#include <cstdio>
#include <string.h>
const int N = 1100, INF = 0x3f3f3f3f;
int edge[N][N];
void Dijkstra(int* D, int n, int from)
{
    int mintag;
    bool vis[N] = {0};
    vis[from] = true;
    memcpy(D, edge[from], 4*N);// 这里不能用sizeof(D), 因为sizeof是在编译时进行，而编译时并不知道D的大小
    for(int i=1; i<n; ++i)
    {
        mintag = from;
        for(int j=1; j<=n; ++j)
            if(!vis[j] && D[j] < D[mintag])
                mintag = j;
        vis[mintag] = true;
        for(int j=1; j<=n; ++j)
            if(!vis[j] && D[mintag] + edge[mintag][j] < D[j])
                D[j] = D[mintag] + edge[mintag][j];
    }
}
int main(void)
{
    int Come[N], Back[N];
    int n, m, x, from, to, d, MAX;
    while(~scanf("%d %d %d", &n, &m, &x))
    {
        memset(edge, INF, sizeof(edge));
        for(int i=0; i<m; ++i)
        {
            scanf("%d %d %d", &from, &to, &d);
            if(d < edge[from][to])
                edge[from][to] = d;
        }
        Dijkstra(Back, n, x);
        for(int i=1; i<=n; ++i)  //生成反向图
            for(int j=i+1; j<=n; ++j)
                edge[i][j] ^= edge[j][i], edge[j][i] ^= edge[i][j], edge[i][j] ^= edge[j][i];
        Dijkstra(Come, n, x);
        MAX = 0;
        for(int i=1; i<=n; ++i)
        {
            d = Come[i] + Back[i];
            if(d < INF && d > MAX)
                MAX = d;
        }
        printf("%d\n", MAX);
    }
}
