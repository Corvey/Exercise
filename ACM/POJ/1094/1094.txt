#include <cstdio>
#include <cstdlib>
#include <string.h>
#include <queue>
using namespace std;
const int N = 26, M = 10000;
int u[M], v[M], Next[M], first[N], in[N];
bool TPSort(int n, int m, int time)
{
    int topo[N], tempin[N];
    memcpy(tempin, in, sizeof(tempin));
    queue<int> q;
    for(int i=0; i<n; ++i)
        if(!tempin[i])
            q.push(i);
    bool ok = q.size() > 1 ? true : false;
    int num, x;
    for(num = 0; !q.empty(); ++num)
    {
        x = q.front();
        q.pop();
        for(int temp = first[x]; ~temp; temp = Next[temp])
            if(!--tempin[v[temp]])
                q.push(v[temp]);
        if(!ok)
            ok = q.size() > 1 ? true : false;
        topo[num] = x;
    }
    if(num - n) //ÓÐ»·
    {
        printf("Inconsistency found after %d relations.\n", time+1);
        return true;
    }
    else
    {
        if(ok)
            return false;
        printf("Sorted sequence determined after %d relations: ", time+1);
        for(int i=0; i<n; ++i)
            printf("%c", topo[i] + 'A');
        printf(".\n");
        return true;
    }
}
int main(void)
{
    //freopen("in.txt", "rt", stdin);
    //freopen("out.txt", "wt", stdout);
    int n, m;
    char str[4];
    while(scanf("%d %d", &n, &m), n+m)
    {
        memset(first, -1, sizeof(first));
        memset(in, 0, sizeof(in));
        if(m < n-1)
        {
            for(int i=0; i<m; ++i)
                scanf("%s", str);
            printf("Sorted sequence cannot be determined.\n");
            continue;
        }
        for(int i=0; i<m; )
        {
            scanf("%s", str);
            u[i] = str[0] - 'A';
            v[i] = str[2] - 'A';
            ++in[v[i]];
            Next[i] = first[u[i]];
            first[u[i]] = i;
            if(TPSort(n, m, i))
                for(++i; i<m; ++i)
                    scanf("%s", str);
            else if(++i == m)
                printf("Sorted sequence cannot be determined.\n");
        }
    }
    return 0;
}
