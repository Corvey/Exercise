#include <cstdio>
#include <string.h>
#include <algorithm>
#include <queue>
using namespace std;
const int INF = 0x3f3f3f3f;
const int N = 1e6, tens[]={1, 10, 100, 1000, 10000}, all[]={0,1,2,3,10,11,12,13,20,21,22,23};
struct node{
    int addTime, douTime, number;
}temp, top;
int cnt[24][N];
inline void getDigit(int *p, int x){
    for(int i=0; i<5; x/=10)
        p[i++] = x%10;
}
inline int Add(int *p, int x, int index){
    return p[index] == 9 ? (x - 9*tens[index]) : (x + tens[index]);
}
inline int Dou(int *p, int x, int index)
{
    int t = p[index];
    if(t < 5)
        return x + tens[index] * t;
    else
        return x - tens[index] * (10 - t);
}
inline int Swap(int *p, int index)
{
    int ret = 0;
    for(int i=0; i<index; ++i)
        ret += p[i] * tens[i];
    ret += p[index+1] * tens[index];
    ret += p[index] * tens[index+1];
    for(int i=index+2; i<5; ++i)
        ret += p[i] * tens[i];
    return ret;
}
inline int getNum(node Tnode){
    return Tnode.douTime * 10 + Tnode.addTime;
}
void BFS(void)
{
    int dig[5], tempNum, topNum;
    queue<node> q;
    memset(cnt, -1, sizeof(cnt));
    temp.addTime = temp.douTime = 0;
    temp.number = 12345;
    for(int i=0; i<12; ++i)
        cnt[all[i]][12345] = 0;
    q.push(temp);
    while(!q.empty())
    {
        top = q.front();
        q.pop();
        getDigit(dig, top.number);
        topNum = getNum(top);
        //swap
        for(int i=0; i<4; ++i)
        {
            temp = top;
            temp.number = Swap(dig, i);
            tempNum = getNum(temp);
            if(cnt[tempNum][temp.number] == -1 ||
               cnt[topNum][top.number] + 1 < cnt[tempNum][temp.number])
            {
                q.push(temp);
                cnt[tempNum][temp.number] = cnt[topNum][top.number] + 1;
            }
        }
        //add
        if(top.addTime < 3)
        {
            for(int i=0; i<5; ++i)
            {
                temp = top;
                ++temp.addTime;
                temp.number = Add(dig, temp.number, i);
                tempNum = getNum(temp);
                if(cnt[tempNum][temp.number] == -1 ||
                   cnt[topNum][top.number] + 1 < cnt[tempNum][temp.number])
                {
                    q.push(temp);
                    cnt[tempNum][temp.number] = cnt[topNum][top.number] + 1;
                }
            }
        }
        //double
        if(top.douTime < 2)
        {
            for(int i=0; i<5; ++i)
            {
                temp = top;
                ++temp.douTime;
                temp.number = Dou(dig, temp.number, i);
                tempNum = getNum(temp);
                if(cnt[tempNum][temp.number] == -1 ||
                   cnt[topNum][top.number] + 1 < cnt[tempNum][temp.number])
                {
                    q.push(temp);
                    cnt[tempNum][temp.number] = cnt[topNum][top.number] + 1;
                }
            }
        }
    }
}
inline int getAns(int x)
{
    int ret = INF, t;
    for(int i=0; i<12; ++i)
    {
        t = all[i];
        if(cnt[t][x] == -1)
            continue;
        ret = cnt[t][x] < ret ? cnt[t][x] : ret;
    }
    return ret == INF ? -1 : ret;
}
int main(void)
{
    BFS();
    int x;
    char str[10];
    while(~scanf("%s", str))
    {
        x = atoi(str);
        printf("%d\n",  getAns(x));
    }
    return 0;
}
